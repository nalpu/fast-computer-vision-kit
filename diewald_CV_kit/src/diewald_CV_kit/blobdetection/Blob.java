
/**
 * 
 * diewald_CV_kit v1.1
 * 
 * this library provides simple tools needed in computer-vision.
 * 
 * 
 * 
 *   (C) 2012    Thomas Diewald
 *               http://www.thomasdiewald.com
 *   
 *   last built: 12/13/2012
 *   
 *   download:   http://thomasdiewald.com/processing/libraries/diewald_CV_kit/
 *   source:     https://github.com/diwi/diewald_CV_kit 
 *   
 *   tested OS:  osx,windows
 *   processing: 1.5.1, 2.07
 *
 *
 *
 *
 * This source is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This code is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * A copy of the GNU General Public License is available on the World
 * Wide Web at <http://www.gnu.org/copyleft/gpl.html>. You can also
 * obtain it by writing to the Free Software Foundation,
 * Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */



package diewald_CV_kit.blobdetection;


import java.util.ArrayList;

import diewald_CV_kit.utility.PixelColor;

/**
*
* the class Blob represents the blobs/labels/regions found in an image.<br>
* 
* 
* @author thomas diewald (c) 2011
*
*/
public final class Blob {
  protected final BlobDetector blob_detector_;
  
  private final ArrayList<PixelRow> pixelrows_ = new ArrayList<PixelRow>(150);
  private PixelColor color_ = new PixelColor((int)(Math.random()*255f), (int)(Math.random()*255f), (int)(Math.random()*255f)); 
  private final ArrayList<Contour> contours_ = new ArrayList<Contour>(5);
  private Pixel pixels_[];
  private int ID_;
  private int number_of_pixels_;
  private int outer_contour_start_x_, outer_contour_start_y_;


  /**
   * the blob gets initialized after the blobdetection process.
   * the given pixelrow gets linked, and with it all the other pixelrows, linked to this one.
   * so its an recursive linking of pixelrows to this blob.
   * heres a small problem on a very big recursion depth, which can cause an stackoverflow!!!!!
   * 
   * 
   * @param blob_detector  parent blobdetector
   * @param ID             id of the blob
   * @param pixelrow       the pixel row that gets linked to the blob
   * @param stack_version  if false, the blob is generated by recursively iterating the adjacent pixelrows
   */
  protected Blob(BlobDetector blob_detector, int ID, PixelRow pixelrow){ 
    blob_detector_ = blob_detector;
    ID_ = ID;

    pixelrow.linkWithBlob(this); // recursively generate a blob of adjacent pixelrows

    
    updateNumberOfPixels(); 
  }
  /*
  protected Blob(BlobDetector blob_detector, int ID, PixelRow pixelrow, boolean stack_version ){ 
    blob_detector_ = blob_detector;
    ID_ = ID;
    
    if( !stack_version )
      pixelrow.linkWithBlob(this); // recursively generate a blob of adjacent pixelrows
    else
      PixelRow.linkWithBlob(this, pixelrow); // ... using a stack
    
    updateNumberOfPixels(); 
  }
  */
  
  
  